<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="VEI Test Plan" enabled="true">
      <stringProp name="TestPlan.comments">To determine the charging status of the vehicle entering CAZ -  10k calls/requests each having 50 VRNs in an hour</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="PP -  Authentication" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authentication BATH VEI" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">client_credentials</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp name="client-id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">4j0bo1vkcimes6c3mjc4h58pr8</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client-id</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">vccs-userpool-preprod.auth.eu-west-2.amazoncognito.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/oauth2/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic NGowYm8xdmtjaW1lczZjM21qYzRoNThwcjg6OTdvYmNta21sanVjcTVyb3FiaThlNzc4ZTluMHEzcG9kOHMwNWtibmVwaXU3MGVwNjM=</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">97obcmkmljucq5roqbi8e778e9n0q3pod8s05kbnepiu70ep63</stringProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">BATH_VEI_ACCESS_TOKEN</stringProp>
            <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NO_BATH_TOKEN</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">log.info(&quot;\n\n***** BATH VEI ACCESS TOKEN===&gt; &quot;+vars.get(&quot;BATH_VEI_ACCESS_TOKEN&quot;))</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">${__setProperty(BATH_VEI_ACCESS_TOKEN,${BATH_VEI_ACCESS_TOKEN})}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authentication BHM VEI" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">client_credentials</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp name="client-id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">33788rnkutbnfe3gbt3n1qlio9</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client-id</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">vccs-userpool-preprod.auth.eu-west-2.amazoncognito.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/oauth2/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic MzM3ODhybmt1dGJuZmUzZ2J0M24xcWxpbzk6ZmhjdjRkM2M0cDl1dTY4Mmg1OGc1ZDNpazMzNmVkdHI2M2gwOW4xcW5qdmdsZzIzN2tv</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">BHM_VEI_ACCESS_TOKEN</stringProp>
            <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NO_BHM_TOKEN</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">log.info(&quot;\n\n***** BHM VEI ACCESS TOKEN===&gt; &quot;+vars.get(&quot;BHM_VEI_ACCESS_TOKEN&quot;))</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">${__setProperty(BHM_VEI_ACCESS_TOKEN,${BHM_VEI_ACCESS_TOKEN})}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authentication PCC VEI" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">client_credentials</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp name="client-id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">33788rnkutbnfe3gbt3n1qlio9</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client-id</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">vccs-userpool-preprod.auth.eu-west-2.amazoncognito.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/oauth2/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic MzM3ODhybmt1dGJuZmUzZ2J0M24xcWxpbzk6ZmhjdjRkM2M0cDl1dTY4Mmg1OGc1ZDNpazMzNmVkdHI2M2gwOW4xcW5qdmdsZzIzN2tv</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">PCC_VEI_ACCESS_TOKEN</stringProp>
            <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NO_PCC_TOKEN</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">log.info(&quot;\n\n***** PCC VEI ACCESS TOKEN===&gt; &quot;+vars.get(&quot;PCC_VEI_ACCESS_TOKEN&quot;))</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">${__setProperty(PCC_VEI_ACCESS_TOKEN,${PCC_VEI_ACCESS_TOKEN})}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="PCC Data File" enabled="true">
        <stringProp name="filename">VEI_PCC_1500r_30c_45kVRNs.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18,P19,P20,P21,P22,P23,P24,P25,P26,P27,P28,P29,P30</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <stringProp name="TestPlan.comments">C:/NP/E2E/PP/DATA/TfGM-Data/</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="VEI PCC TG" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VEI POST - PCC" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;vehicleEntrants&quot;: [&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P1}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P2}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P3}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P4}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P5}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P6}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P7}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P8}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P9}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P10}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P11}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P12}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P13}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P14}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P15}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P16}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P17}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&#xd;
		&quot;vrn&quot;: &quot;${P18}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P19}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
		{&#xd;
		&quot;vrn&quot;: &quot;${P20}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P21}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P22}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P23}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P24}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P25}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P26}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&#xd;
		&quot;vrn&quot;: &quot;${P27}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P28}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P29}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;vrn&quot;: &quot;${P30}&quot;,&#xd;
		&quot;timestamp&quot;: &quot;2021-08-05T155300Z&quot;&#xd;
	}&#xd;
	]&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">preprod-vccs-api.cleanairzone.defra.gov.uk</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">v1/vehicle-entrants</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">to determine if a vehicle entrant has paid a charge due - Sinle Hardcoded</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-PCC" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-api-key</stringProp>
                  <stringProp name="Header.value">aecc6d2b-7e18-42a9-a436-9a3827a189df</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Correlation-ID</stringProp>
                  <stringProp name="Header.value">${__UUID()}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(PCC_VEI_ACCESS_TOKEN)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Timestamp</stringProp>
                  <stringProp name="Header.value">${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Leeds API Key</stringProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>throughput</name>
              <value>420.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">3600</intProp>
            <longProp name="duration">3600</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <intProp name="exactLimit">420</intProp>
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <longProp name="randomSeed">0</longProp>
            <stringProp name="TestPlan.comments">old: 150k</stringProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
